/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/battleshipdisplay.js":
/*!**********************************!*\
  !*** ./src/battleshipdisplay.js ***!
  \**********************************/
/***/ ((module) => {

eval("const battleShipDisplay = () => {\n  const render = (gameboard, status, queueAttack,dropShip) => {\n    const board = document.createElement('div');\n    board.classList.add('gameboard');\n    gameboard.board.forEach((point, indexX) => {\n      const row = document.createElement('div');\n      row.classList.add('row');\n      gameboard.board[indexX].forEach((grid, indexY) => {\n        const cell = document.createElement('div');\n        cell.setAttribute('draggable', false);\n        cell.addEventListener('dragenter',(e)=>{e.preventDefault()})\n        cell.addEventListener('dragover',(e)=>{e.preventDefault()})\n        cell.addEventListener('drop',dropShip)\n        cell.setAttribute('data-x', indexX);\n        cell.setAttribute('data-y', indexY);\n        cell.classList.add('cell');\n      \n        if (status === 'enemy') {\n          cell.addEventListener('click', queueAttack);\n        }\n        const marker = document.createElement('div');\n        marker.classList.add('marker');\n        if (grid === 'hit') {\n          cell.appendChild(marker);\n          cell.classList.add('hit');\n        } else if (grid === 'miss') {\n          cell.appendChild(marker);\n          cell.classList.add('miss');\n        } else if ((grid === 'occupied') && (status === 'friendly')) {\n          cell.classList.add('ship');\n        } else if (grid === 'queued') {\n          cell.appendChild(marker);\n        }\n\n        row.appendChild(cell);\n      });\n      board.appendChild(row);\n    });\n    return board;\n  };\n  return { render };\n};\n\nmodule.exports = battleShipDisplay;\n\n\n//# sourceURL=webpack://odin-battleship/./src/battleshipdisplay.js?");

/***/ }),

/***/ "./src/firebutton.js":
/*!***************************!*\
  !*** ./src/firebutton.js ***!
  \***************************/
/***/ ((module) => {

eval("const firebutton = () => {\n    const render=(status,clickFN) => {\n        const fireButton = document.createElement('div')\n            fireButton.classList.add('fire-button')\n            fireButton.classList.add(`${status}`)\n            if (status === 'armed'){ \n                fireButton.addEventListener('click',clickFN)\n            }\n        return fireButton;\n    }\n\n\nreturn {render};\n}\nmodule.exports = firebutton;\n\n//# sourceURL=webpack://odin-battleship/./src/firebutton.js?");

/***/ }),

/***/ "./src/gameboard.js":
/*!**************************!*\
  !*** ./src/gameboard.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ship = __webpack_require__(/*! ./ship */ \"./src/ship.js\");\n\nconst gameboard = () => {\n  const shipsToPlace = [\n    { name: 'carrier', length: 5, quantity: 1 },\n    { name: 'battleship', length: 4, quantity: 1 },\n    { name: 'destroyer', length: 3, quantity: 1 },\n    { name: 'submarine', length: 3, quantity: 1 },\n    { name: 'patrol boat', length: 2, quantity: 1 },\n  ];\n  const ships = [];\n  const directions = ['north', 'south', 'east', 'west'];\n  const attacks = [];\n  let queuedAttacks = [];\n  const board = [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']];\n\n  const allSunk = () => {\n    let allShipsSunk = true;\n    ships.forEach((battleShip) => {\n      if (!battleShip.isSunk()) {\n        allShipsSunk = false;\n      }\n    });\n    return allShipsSunk;\n  };\n  const onBoard = (battleShip) => {\n    let onBoardFlag = true;\n    battleShip.parts.forEach((part) => {\n      if ((part.x < 0) || (part.y < 0) || (part.x >= 10) || (part.y >= 10)) {\n        onBoardFlag = false;\n      }\n    });\n    return onBoardFlag;\n  };\n  const unObstructed = (battleShip) => {\n    let unObstructedFlag = true;\n    battleShip.parts.forEach((part) => {\n      if (board[part.x][part.y] !== '') {\n        unObstructedFlag = false;\n      }\n    });\n    return unObstructedFlag;\n  };\n\n  const placeShip = (x, y, facing, length,name) => {\n    const battleShip = ship(x, y, facing, length,name);\n    if (onBoard(battleShip) && unObstructed(battleShip)) {\n      ships.push(battleShip);\n      battleShip.parts.forEach((part) => {\n        board[part.x][part.y] = 'occupied';\n      });\n\n      return battleShip;\n    } if (!onBoard(battleShip)) {\n      console.log('off board')\n      return 'fail';\n    } if (!unObstructed(battleShip)) {\n      console.log('obstructed')\n      return 'fail';\n    }\n    return 'fail';\n  };\n\n  const placeAllShips = () => {\n    shipsToPlace.forEach((shipToPlace) => {\n      for (let i = 0; i < shipToPlace.quantity; i += 1) {\n        let placed = 'fail';\n        while ((placed === 'fail')) {\n          const placeX = Math.floor(Math.random() * 10);\n          const placeY = Math.floor(Math.random() * 10);\n          const facing = directions[Math.floor(Math.random() * 4)];\n          placed = placeShip(placeX, placeY, facing, shipToPlace.length,shipToPlace.name);\n        }\n      }\n    });\n  };\n  \n  const nextShipToPlace =()=>{\n    return shipsToPlace.shift()\n  }\n  const hasShipsToPlace =()=>{\n    return ((shipsToPlace.length > 0)? true : false);\n  }\n  const receiveAttack = (attackX, attackY) => {\n    let result = 'miss';\n    attacks.forEach((attack) => {\n      if ((attack.attackX === attackX) && (attack.attackY === attackY)) {\n        result = 'duplicate';\n      }\n\n      return result;\n    });\n    console.log(`receiving attack ${attackX}, ${attackY}`);\n    if (result !== 'duplicate') { \n      ships.forEach((attackedShip) => {\n        if (attackedShip.hit(attackX, attackY)) {\n          result = 'hit';\n          console.log(`hit! ${attackX},${attackY}!`);\n        }\n      });\n      board[attackX][attackY] = result;\n    }\n    attacks.push({ attackX, attackY, result });\n    return result;\n  };\n  const queueAttack = (attackX, attackY) => {\n    let result = 'miss';\n    attacks.forEach((attack) => {\n      if ((attack.attackX === attackX) && (attack.attackY === attackY)) {\n        result = 'duplicate';\n      }\n    });\n\n    if (result !== 'duplicate') {\n      board[attackX][attackY] = 'queued';\n      queuedAttacks.push({ attackX, attackY, result: 'queued' });\n    }\n  };\n  const applyQueuedAttacks = () => {\n    queuedAttacks.forEach((attack) => {\n      receiveAttack(attack.attackX, attack.attackY);\n    });\n    queuedAttacks = [];\n  };\n\n  return {\n    ships,\n    attacks,\n    placeShip,\n    receiveAttack,\n    allSunk,\n    board,\n    placeAllShips,\n    queueAttack,\n    hasShipsToPlace,\n    nextShipToPlace,\n    applyQueuedAttacks,\n  };\n};\n\nmodule.exports = gameboard;\n\n\n//# sourceURL=webpack://odin-battleship/./src/gameboard.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("//imports\nconst player = __webpack_require__(/*! ./player */ \"./src/player.js\");\nconst battleShipDisplay = __webpack_require__(/*! ./battleshipdisplay */ \"./src/battleshipdisplay.js\");\nconst shipPicker =__webpack_require__ (/*! ./shippicker */ \"./src/shippicker.js\")\nconst fireButton = __webpack_require__(/*! ./firebutton */ \"./src/firebutton.js\")\n\n\n// global variables\nlet gameState = 'new'\nconst board1 = document.getElementById('board1');\nconst board1b = document.getElementById('board1-b');\nconst board2 = document.getElementById('board2');\nconst board2b = document.getElementById('board2-b');\nlet winner = null;\nconst display = battleShipDisplay();\nconst shipDisplay = shipPicker();\nconst fire = fireButton()\nconst player1 = player('Player 1');\nconst player2 = player('Computer');\nconst currentPlayer = player1;\nconst opponent = player2;\nlet dragAdjust =0;\nlet shipOrientation = 'north';\nlet queuedAttacks = 0;\nlet currentPlayerShots = 0;\nlet opponentShots = 0;\n\nfunction countShotsRemaining(){\n    currentPlayerShots = 0;\n    opponentShots = 0;\n    currentPlayer.board.ships.forEach((ship) => {\n        if (!ship.isSunk()) {\n            currentPlayerShots += 1;\n        }\n    });\n    opponent.board.ships.forEach((ship) => {\n        if (!ship.isSunk()) {\n            opponentShots += 1;\n        }\n    });\n\n}\n\nfunction swapTop() {\n    document.querySelector('.top-display-cube').classList.toggle('rotated')\nconsole.log('swapping top')\n}\nfunction swapBottom() {\n    document.querySelector('.bottom-display-cube').classList.toggle('rotated')\n    console.log('swapping bottom')\n}\ndocument.querySelector('#top-button').addEventListener('click',swapTop)\ndocument.querySelector('#bottom-button').addEventListener('click',swapBottom)\n\nfunction clearBoard(boardToClear){\n    while(boardToClear.firstElementChild){\n        boardToClear.removeChild(boardToClear.firstChild)\n    }\n}\nfunction startDrag (e){\n\n    console.log(e.target)\n    dragAdjust = e.target.getAttribute('data-index')\n    shipOrientation = (e.target.parentNode.style.flexDirection =='column')? 'north': 'west'\n    console.log(dragAdjust, shipOrientation)\n}\nfunction acceptClick() {\n    countShotsRemaining()\n\n    if (winner==null){   \n        if (queuedAttacks<currentPlayerShots){\n            opponent.board.queueAttack(parseInt(this.getAttribute('data-x'), 10), parseInt(this.getAttribute('data-y'), 10));\n            queuedAttacks += 1;\n  \n        while (board1.firstElementChild) {\n            board1.removeChild(board1.firstChild);\n        }\n        while (board2.firstElementChild) {\n            board2.removeChild(board2.firstChild);\n        }\n        if (queuedAttacks === currentPlayerShots) {\n            opponent.board.applyQueuedAttacks();\n            opponent.volley(currentPlayer.board, opponentShots);\n            queuedAttacks = 0;\n        }\n  \n      board2.appendChild(display.render(player1.board, 'friendly', acceptClick,acceptDrag));\n      board1.appendChild(display.render(player2.board, 'enemy', acceptClick,acceptDrag));\n  \n      currentPlayerShots = 0;\n      opponentShots = 0;\n  \n      currentPlayer.board.ships.forEach((ship) => {\n        if (!ship.isSunk()) {\n          currentPlayerShots += 1;\n        }\n      });\n      opponent.board.ships.forEach((ship) => {\n        if (!ship.isSunk()) {\n          opponentShots += 1;\n        }\n      });\n  \n      if (player1.board.allSunk() === true) {\n        winner = player2.name;\n        let toast = winner + \" wins!\"\n        let toastp = document.createElement('p')\n        toastp.style.color='black'\n        toastp.textContent= toast;\n        coms.appendChild(toastp)\n      } else if (player2.board.allSunk() === true) {\n        winner = player1.name;\n        let toast = winner + \" wins!\"\n        let toastp = document.createElement('p')\n        toastp.style.color='black'\n        toastp.textContent= toast;\n        coms.appendChild(toastp)\n      }\n      }\n  \n      while (board1.firstElementChild) {\n        board1.removeChild(board1.firstChild);\n      }\n      while (board2.firstElementChild) {\n        board2.removeChild(board2.firstChild);\n      }\n      if (queuedAttacks === currentPlayerShots) {\n        opponent.board.applyQueuedAttacks();\n        opponent.volley(currentPlayer.board, opponentShots);\n        queuedAttacks = 0;\n      }\n  \n      board2.appendChild(display.render(player1.board, 'friendly', acceptClick,acceptDrag));\n      board1.appendChild(display.render(player2.board, 'enemy', acceptClick,acceptDrag));\n  \n      currentPlayerShots = 0;\n      opponentShots = 0;\n  \n      currentPlayer.board.ships.forEach((ship) => {\n        if (!ship.isSunk()) {\n          currentPlayerShots += 1;\n        }\n      });\n      opponent.board.ships.forEach((ship) => {\n        if (!ship.isSunk()) {\n          opponentShots += 1;\n        }\n      });\n      if (winner === null){\n        if (player1.board.allSunk() === true) {\n          winner = player2.name;\n          let toast = winner + \" wins!\"\n          let toastp = document.createElement('p')\n          toastp.textContent= toast;\n          document.querySelector('.coms').appendChild(toastp)\n        } else if (player2.board.allSunk() === true) {\n          winner = player1.name;\n          let toast = winner + \" wins!\"\n          let toastp = document.createElement('p')\n          toastp.textContent= toast;\n          document.querySelector('.coms').appendChild(toastp)\n        }\n        }\n    }\n}\n  \nfunction acceptDrag (e){\n    if (shipToPlace) {\n      e.preventDefault()\n      let tempX = parseInt(e.target.getAttribute('data-x'), 10) \n      let tempY = parseInt(e.target.getAttribute('data-y'), 10) \n      if (shipOrientation === \"north\"){\n        tempX = tempX - dragAdjust\n      } else {\n        tempY = tempY- dragAdjust\n  \n      }\n      console.log (tempX+\" , \"+tempY + \" \"+shipOrientation )\n      if (player1.board.placeShip(tempX,tempY,shipOrientation,shipToPlace.length,shipToPlace.name) != 'fail'){\n            console.log('ship placed')\n          if (player1.board.hasShipsToPlace()){\n            console.log('placing additional ships')\n            gameState = 'placing ships'\n          }else {\n            console.log('all ships placed')\n            gameState= 'ships placed'\n          \n          }\n          updateBoard()\n    } else {\n      console.log('ship place fail')\n    }\n    \n  }\n\n}\n\nfunction fireFn(){\n    console.log('firing...')\n}\n\n//start game\n    // create player obj\n    // create boards\n        // display ship placer\n        // display player1 board\n        // place computer ships\n    // take shots\n    // activate fire button\n    // apply shots to computer board\n    // queue shots for human board\n    // apply shots to human board\n    // check for victory condition\n    // reset\n\nfunction updateBoard(){\n    switch (gameState) {\n        case 'new':\n            //display ship placer and p1 board\n            clearBoard(board1)\n            clearBoard(board2)\n            board1.appendChild(display.render(player1.board, 'friendly', acceptClick,acceptDrag))\n            shipToPlace = player1.board.nextShipToPlace();\n            board2.appendChild(shipDisplay(shipToPlace,startDrag))\n            console.log('initialized, place ships')\n            break;\n        case 'placing ships':\n            console.log('placing next ship')\n            clearBoard(board1)\n            clearBoard(board2)\n            board1.appendChild(display.render(player1.board, 'friendly', acceptClick,acceptDrag))\n            shipToPlace = player1.board.nextShipToPlace();\n            board2.appendChild(shipDisplay(shipToPlace,startDrag))\n        break;    \n        case 'ships placed':\n            //accept shots\n            console.log('ships placed')\n            console.log(player1.board)\n            clearBoard(board1)\n            board1.appendChild(display.render(player1.board, 'friendly', acceptClick,acceptDrag));\n            board1b.appendChild(display.render(player1.board, 'enemy', acceptClick,acceptDrag));\n            board2b.appendChild(fire.render('armed',fireFn))\n            swapTop()\n            swapBottom()\n            break;\n        case 'accepting shots':\n            \n            break;\n        case 'ready to fire':\n            //show fire button\n\n\n            break;\n        case 'applying shots':\n\n            break;\n        case 'player1 win':\n            break;\n        case 'player2 win':\n            break;\n\n\n        default:\n            break;\n    }\n }\n updateBoard();\n\n//# sourceURL=webpack://odin-battleship/./src/index.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const gameboard = __webpack_require__(/*! ./gameboard */ \"./src/gameboard.js\");\n\nconst player = (playerName) => {\n  const board = gameboard();\n  const name = playerName;\n  const guesses = [];\n  let result;\n  const makeMove = (opponentBoard) => {\n    let attackX; let attackY;\n\n    if (guesses.length === 0) {\n      attackX = Math.floor(Math.random() * 10);\n      attackY = Math.floor(Math.random() * 10);\n      result = opponentBoard.receiveAttack(attackX, attackY);\n    } else if (guesses.length > 0) {\n      const guess = guesses.pop();\n      attackX = guess.attackX;\n      attackY = guess.attackY;\n      result = opponentBoard.receiveAttack(attackX, attackY);\n    }\n    console.log(`${name} attacks ${attackX}, ${attackY}`);\n    if (result === ('hit')) {\n      if (attackX > 0) {\n        guesses.push({ attackX: attackX - 1, attackY });\n      }\n      if (attackY > 0) {\n        guesses.push({ attackX, attackY: attackY - 1 });\n      }\n      if (attackX < 9) {\n        guesses.push({ attackX: attackX + 1, attackY });\n      }\n      if (attackY < 9) {\n        guesses.push({ attackX, attackY: attackY + 1 });\n      }\n    }\n  };\n  const volley = (opponentBoard, shots) => {\n    let attackX;\n    let attackY;\n    if (guesses.length === 0) {\n      for (let i = 0; i < shots; i += 1) {\n        attackX = Math.floor(Math.random() * 10);\n        attackY = Math.floor(Math.random() * 10);\n        result = opponentBoard.receiveAttack(attackX, attackY);\n        if (result === ('hit')) {\n          if (attackX > 0) {\n            guesses.push({ attackX: attackX - 1, attackY });\n          }\n          if (attackY > 0) {\n            guesses.push({ attackX, attackY: attackY - 1 });\n          }\n          if (attackX < 9) {\n            guesses.push({ attackX: attackX + 1, attackY });\n          }\n          if (attackY < 9) {\n            guesses.push({ attackX, attackY: attackY + 1 });\n          }\n        }\n      }\n    } else if (guesses.length > 0) {\n      for (let i = 0; i < shots; i += 1) {\n        makeMove(opponentBoard);\n      }\n    }\n  };\n  const placeShips = () => {\n\n  };\n  return {\n    name, board, makeMove, placeShips, volley,\n  };\n};\n\nmodule.exports = player;\n\n\n//# sourceURL=webpack://odin-battleship/./src/player.js?");

/***/ }),

/***/ "./src/ship.js":
/*!*********************!*\
  !*** ./src/ship.js ***!
  \*********************/
/***/ ((module) => {

eval("const ship = (x, y, facing, shipLength,shipName) => {\n  const length = shipLength; let xFactor; let yFactor;\n  let isSunkFlag = false;\n  const name = shipName;\n  const parts = new Array(0);\n  switch (facing) {\n    case 'north':\n      xFactor = 1;\n      yFactor = 0;\n      break;\n    case 'south':\n      xFactor = -1;\n      yFactor = 0;\n      break;\n    case 'east':\n      xFactor = 0;\n      yFactor = -1;\n      break;\n    case 'west':\n      xFactor = 0;\n      yFactor = 1;\n      break;\n    default:\n      break;\n  }\n\n  for (let i = 0; i < length; i += 1) {\n    parts.push({\n      x: x + i * xFactor,\n      y: y + i * yFactor,\n      hit: false,\n    });\n  }\n  const hit = (xPos, yPos) => {\n    let gotHit = false;\n    parts.forEach((part) => {\n      if ((part.x === xPos) && (part.y === yPos)&&(part.hit === false)) {\n        part.hit = true;\n        gotHit = true;\n      }\n    });\n    isSunk();\n    return gotHit;\n  };\n\n  const isSunk = () => {\n    let sunk = true;\n    for (let i = 0; i < length; i += 1) {\n      if (parts[i].hit === false) sunk = false;\n    }\n    if ((sunk === true) && (isSunkFlag=== false)){\n      isSunkFlag = true;\n      let coms = document.querySelector('.coms')\n      let sunkMessage = document.createElement('p')\n      sunkMessage.style.color = 'red';\n      sunkMessage.innerText = name + \" sunk!\"\n      coms.appendChild(sunkMessage)\n    }\n    return sunk;\n  };\n\n  return {\n    x, y, facing, length, parts, hit, isSunk, name,\n  };\n};\n\nmodule.exports = ship;\n\n\n//# sourceURL=webpack://odin-battleship/./src/ship.js?");

/***/ }),

/***/ "./src/shippicker.js":
/*!***************************!*\
  !*** ./src/shippicker.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ship = __webpack_require__(/*! ./ship */ \"./src/ship.js\")\n\nconst shipPicker = ()=>{\n\n    const render = (ship,startDragFunc)=>{\n        let display = document.createElement(\"div\")\n        display.classList.add(\"ship-display\")\n        let shipDisplay = document.createElement(\"div\")\n        shipDisplay.classList.add('draggable-ship')\n        shipDisplay.setAttribute('draggable',true)\n        for (let i=0;i<ship.length;i++){\n            const cell = document.createElement('div');\n            cell.classList.add(\"cell\")\n            cell.classList.add(\"ship\")\n            cell.addEventListener(\"mousedown\",startDragFunc)\n            cell.setAttribute(\"data-index\",i)\n            cell.setAttribute(\"data-facing\",'north')\n            shipDisplay.appendChild(cell)\n        }\n        shipDisplay.style.display= 'flex';\n        shipDisplay.style.flexDirection = \"column\"\n        display.appendChild(shipDisplay)\n        \n        let rotateButton = document.createElement('button')\n        rotateButton.innerText = \"Rotate\"\n        rotateButton.addEventListener('click',()=>{\n            if (shipDisplay.style.flexDirection=='column') {\n                shipDisplay.style.flexDirection = 'row';\n    \n            }else{\n                shipDisplay.style.flexDirection = 'column';\n            }\n             \n            \n        });\n        display.append(rotateButton);\n        return display;\n    }\n\n\n\nreturn render;\n}\nmodule.exports = shipPicker;\n\n//# sourceURL=webpack://odin-battleship/./src/shippicker.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;